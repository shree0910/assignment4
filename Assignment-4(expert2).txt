1.Running Sum of 1d Array.
class Solution {
    public int[] runningSum(int[] nums) {
        int sum=nums[0];
        for(int i=1;i<nums.length;i++)
        {
            sum += nums[i];
            int t = nums[i];
            nums[i]=sum;
        }
        return nums;
        
    }
}


2.Sum of All Odd Length Subarrays.
class Solution {
    public int sumOddLengthSubarrays(int[] arr) {
      int result = 0;
        int n = arr.length;
        
        for (int i = 0; i < n; i++) {
            int endingHere = i + 1;
            int startingHere = n - i;
            int totalSubarrays = endingHere * startingHere;
            int oddSubarrays = totalSubarrays / 2;
            if (totalSubarrays % 2 == 1) {
                oddSubarrays++;
            }
            result += oddSubarrays * arr[i];
        }
        
        return result;  
    }
}


3.Find the Highest Altitude.
class Solution {
    public int largestAltitude(int[] gain) {
      int max=0;
     int sum=0;
     for(int i=0;i<gain.length;i++){
       sum+=gain[i];
       max=Math.max(max,sum);
     }
    return max;  
    }
}


4.Find the Middle Index in Array.
class Solution {
    public int findMiddleIndex(int[] nums) {
      int leftSum = 0, rightSum = 0;
       for(int n : nums) rightSum += n;
       for(int i = 0; i < nums.length; i ++) {
           rightSum -= nums[i];
           if(leftSum == rightSum) return i;
           leftSum += nums[i];
       } 
       return - 1;  
    }
}


5.Find the Pivot Integer.
class Solution {
    public int pivotInteger(int n) {
       int fsum=1,bsum=(n*(n+1))/2;
        
        if(n==1) return 1;
        for(int i=2;i<=n;i++)
        {
            fsum=fsum+i;
            bsum=bsum-(i-1);
            if(fsum==bsum)
            return i;
        }
        return -1; 
    }
}


6.Left and Right Sum Differences.
class Solution {
    public int[] leftRightDifference(int[] nums) {
        int leftSum = 0, rightSum = 0;
       for(int n : nums) rightSum += n;
       for(int i = 0; i < nums.length; i ++) {
           leftSum += nums[i];
           rightSum -= nums[i];
           nums[i] = Math.abs((leftSum - nums[i]) - rightSum);
       } 
       return nums;
    }
}